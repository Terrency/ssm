<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--
        Scans the classpath for annotated components that will be auto-registered as Spring beans.
        By default, the Spring-provided @Component, @Repository, @Service, @Controller,
        @RestController, @ControllerAdvice, and @Configuration stereotypes will be detected.
    -->
    <context:component-scan base-package="com.ssm.*.core"/>

    <import resource="classpath:spring-datasource.xml"/>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 声明式事务管理(编程式事务管理推荐使用TransactionTemplate) -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 编程式事务管理 -->
    <!--
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>
    -->

    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="edit*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="query*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="transactionPointcut" expression="execution(* com.ssm.*.core.service.*Impl.*(..))"/>
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut" order="2"/>
        <!--
        <aop:aspect ref="dynamicDataSource" order="1">
            <aop:before method="setDataSource" pointcut-ref="transactionPointcut"/>
        </aop:aspect>
        -->
    </aop:config>

    <!--<bean id="dynamicDataSource" class="DynamicDataSource"/>-->

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="databaseIdProvider">
            <bean class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">
                <property name="properties">
                    <props>
                        <prop key="MySQL">mysql</prop>
                        <prop key="Oracle">oracle</prop>
                    </props>
                </property>
            </bean>
        </property>
        <!-- 配置SQL映射文件(默认与Mapper类路径相同) -->
        <!--<property name="mapperLocations" value="classpath*:mapper/*Mapper.xml"/>-->
        <!-- 自动创建别名(别名就是类名且大小写均可, 注意此处不支持使用通配符) -->
        <!--<property name="typeAliasesPackage" value="com.ssm.*.api.model"/>-->
        <!-- 注意:只有纳入Spring容器管理的Bean方可进行依赖注入. -->
        <property name="plugins">
            <array>
                <bean class="com.ssm.common.core.page.PageInterceptor">
                    <constructor-arg>
                        <bean class="com.ssm.common.core.page.MySQLDialect"/>
                    </constructor-arg>
                </bean>
            </array>
        </property>
    </bean>

    <!--
    <bean id="sqlSessionFactory" class="org.mybatis.spring.PackagesSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="databaseIdProvider">
            <bean class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">
                <property name="properties" ref="vendorProperties"/>
            </bean>
        </property>
        <property name="mapperLocations" value="classpath*:mapper/*Mapper.xml"/>
        <property name="typeAliasesPackage" value="com.ssm.*.api.model"/>
    </bean>
    <bean id="vendorProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="Oracle">oracle</prop>
                <prop key="MySQL">mysql</prop>
            </props>
        </property>
    </bean>
    -->

    <!--
    <a href="http://www.mybatis.org/mybatis-3/zh/">mybatis</a>
    <a href="http://www.mybatis.org/spring/zh/mappers.html">mybatis-spring</a>
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- optional unless there are multiple session factories defined -->
        <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
        <!-- You can set more than one package by using a semicolon or comma as a separator. -->
        <property name="basePackage" value="com.ssm.*.core.mapper"/>
    </bean>

    <!-- Hessian RPC -->
    <bean id="hessianServiceExporter" class="org.springframework.remoting.caucho.HessianServiceExporter" abstract="true">
        <property name="allowNonSerializable" value="true"/>
    </bean>

</beans>
